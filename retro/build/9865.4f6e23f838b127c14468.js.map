{"version":3,"file":"9865.4f6e23f838b127c14468.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/notebook-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { DOMUtils } from '@jupyterlab/apputils';\nimport { PageConfig, Text, Time } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { NotebookPanel } from '@jupyterlab/notebook';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { RetroApp, RetroShell, IRetroShell } from '@retrolab/application';\nimport { Poll } from '@lumino/polling';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class for kernel status errors.\n */\nconst KERNEL_STATUS_ERROR_CLASS = 'jp-RetroKernelStatus-error';\n/**\n * The class for kernel status warnings.\n */\nconst KERNEL_STATUS_WARN_CLASS = 'jp-RetroKernelStatus-warn';\n/**\n * The class for kernel status infos.\n */\nconst KERNEL_STATUS_INFO_CLASS = 'jp-RetroKernelStatus-info';\n/**\n * The class to fade out the kernel status.\n */\nconst KERNEL_STATUS_FADE_OUT_CLASS = 'jp-RetroKernelStatus-fade';\n/**\n * A plugin for the checkpoint indicator\n */\nconst checkpoints = {\n    id: '@retrolab/application-extension:checkpoints',\n    autoStart: true,\n    requires: [IDocumentManager, ITranslator],\n    optional: [IRetroShell],\n    activate: (app, docManager, translator, retroShell) => {\n        const { shell } = app;\n        const trans = translator.load('retrolab');\n        const widget = new Widget();\n        widget.id = DOMUtils.createDomID();\n        widget.addClass('jp-RetroCheckpoint');\n        app.shell.add(widget, 'top', { rank: 100 });\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!current) {\n                return;\n            }\n            const context = docManager.contextForWidget(current);\n            context === null || context === void 0 ? void 0 : context.fileChanged.disconnect(onChange);\n            context === null || context === void 0 ? void 0 : context.fileChanged.connect(onChange);\n            const checkpoints = await (context === null || context === void 0 ? void 0 : context.listCheckpoints());\n            if (!checkpoints) {\n                return;\n            }\n            const checkpoint = checkpoints[checkpoints.length - 1];\n            widget.node.textContent = trans.__('Last Checkpoint: %1', Time.formatHuman(new Date(checkpoint.last_modified)));\n        };\n        if (retroShell) {\n            retroShell.currentChanged.connect(onChange);\n        }\n        new Poll({\n            auto: true,\n            factory: () => onChange(),\n            frequency: {\n                interval: 2000,\n                backoff: false\n            },\n            standby: 'when-hidden'\n        });\n    }\n};\n/**\n * The kernel logo plugin.\n */\nconst kernelLogo = {\n    id: '@retrolab/application-extension:kernel-logo',\n    autoStart: true,\n    requires: [IRetroShell],\n    activate: (app, shell) => {\n        const { serviceManager } = app;\n        const baseUrl = PageConfig.getBaseUrl();\n        let widget;\n        const onChange = async () => {\n            var _a, _b, _c, _d, _e;\n            if (widget) {\n                widget.dispose();\n                widget.parent = null;\n            }\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            await current.sessionContext.ready;\n            current.sessionContext.kernelChanged.disconnect(onChange);\n            current.sessionContext.kernelChanged.connect(onChange);\n            const name = (_c = (_b = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '';\n            const spec = (_e = (_d = serviceManager.kernelspecs) === null || _d === void 0 ? void 0 : _d.specs) === null || _e === void 0 ? void 0 : _e.kernelspecs[name];\n            if (!spec) {\n                return;\n            }\n            let kernelIconUrl = spec.resources['logo-64x64'];\n            if (!kernelIconUrl) {\n                return;\n            }\n            const index = kernelIconUrl.indexOf('kernelspecs');\n            kernelIconUrl = baseUrl + kernelIconUrl.slice(index);\n            const node = document.createElement('div');\n            const img = document.createElement('img');\n            img.src = kernelIconUrl;\n            img.title = spec.display_name;\n            node.appendChild(img);\n            widget = new Widget({ node });\n            widget.addClass('jp-RetroKernelLogo');\n            app.shell.add(widget, 'top', { rank: 10010 });\n        };\n        shell.currentChanged.connect(onChange);\n    }\n};\n/**\n * A plugin to display the kernel status;\n */\nconst kernelStatus = {\n    id: '@retrolab/application-extension:kernel-status',\n    autoStart: true,\n    requires: [IRetroShell],\n    activate: (app, shell) => {\n        const widget = new Widget();\n        widget.addClass('jp-RetroKernelStatus');\n        app.shell.add(widget, 'menu', { rank: 10010 });\n        const removeClasses = () => {\n            widget.removeClass(KERNEL_STATUS_ERROR_CLASS);\n            widget.removeClass(KERNEL_STATUS_WARN_CLASS);\n            widget.removeClass(KERNEL_STATUS_INFO_CLASS);\n            widget.removeClass(KERNEL_STATUS_FADE_OUT_CLASS);\n        };\n        const onStatusChanged = (sessionContext) => {\n            const status = sessionContext.kernelDisplayStatus;\n            let text = `Kernel ${Text.titleCase(status)}`;\n            removeClasses();\n            switch (status) {\n                case 'busy':\n                case 'idle':\n                    text = '';\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n                case 'dead':\n                case 'terminating':\n                    widget.addClass(KERNEL_STATUS_ERROR_CLASS);\n                    break;\n                case 'unknown':\n                    widget.addClass(KERNEL_STATUS_WARN_CLASS);\n                    break;\n                default:\n                    widget.addClass(KERNEL_STATUS_INFO_CLASS);\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n            }\n            widget.node.textContent = text;\n        };\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            const sessionContext = current.sessionContext;\n            sessionContext.statusChanged.connect(onStatusChanged);\n        };\n        shell.currentChanged.connect(onChange);\n    }\n};\n/**\n * The default paths for a RetroLab app.\n */\nconst paths = {\n    id: '@retrolab/application-extension:paths',\n    activate: (app) => {\n        if (!(app instanceof RetroApp)) {\n            throw new Error(`${paths.id} must be activated in RetroLab.`);\n        }\n        return app.paths;\n    },\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths\n};\n/**\n * The default RetroLab application shell.\n */\nconst shell = {\n    id: '@retrolab/application-extension:shell',\n    activate: (app) => {\n        if (!(app.shell instanceof RetroShell)) {\n            throw new Error(`${shell.id} did not find a RetroShell instance.`);\n        }\n        return app.shell;\n    },\n    autoStart: true,\n    provides: IRetroShell\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    checkpoints,\n    kernelLogo,\n    kernelStatus\n];\nexport default plugins;\n"],"names":["KERNEL_STATUS_ERROR_CLASS","KERNEL_STATUS_WARN_CLASS","KERNEL_STATUS_INFO_CLASS","KERNEL_STATUS_FADE_OUT_CLASS","checkpoints","id","autoStart","requires","IDocumentManager","ITranslator","optional","IRetroShell","activate","app","docManager","translator","retroShell","shell","trans","load","widget","Widget","DOMUtils","addClass","add","rank","onChange","async","current","currentWidget","context","contextForWidget","fileChanged","disconnect","connect","listCheckpoints","checkpoint","length","node","textContent","__","Time","Date","last_modified","currentChanged","Poll","auto","factory","frequency","interval","backoff","standby","kernelLogo","serviceManager","baseUrl","PageConfig","_a","_b","_c","_d","_e","dispose","parent","NotebookPanel","sessionContext","ready","kernelChanged","name","session","kernel","spec","kernelspecs","specs","kernelIconUrl","resources","index","indexOf","slice","document","createElement","img","src","title","display_name","appendChild","kernelStatus","onStatusChanged","status","kernelDisplayStatus","text","Text","removeClass","statusChanged","paths","RetroApp","Error","provides","JupyterFrontEnd","RetroShell"],"sourceRoot":""}